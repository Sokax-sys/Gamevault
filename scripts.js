let currentCategorySlide = 0;
let currentBannerSlide = 0;
let isSignUpMode = false;
let isAdmin = JSON.parse(localStorage.getItem('isAdmin') || 'false');
let currentEditGameIndex = null;
let currentEditBannerIndex = null;
let currentEditProductId = null;
let countdownInterval = null;

// Cache localStorage data
let cachedUsers = null;
let cachedGames = null;
let cachedBanners = null;
let cachedProducts = null;
let cachedCart = null;

const adminKeys = {
  key1: 'X7B9Q2L4M6N8P3C5',
  key2: 'A1D5K9Z3W7T2Y6Q8',
  key3: 'M4P7X2L9C1N5B3Q8'
};

const gamePageMap = {
  'Roblox': 'roblox.html',
  'Free Fire': 'freefire.html',
  'Li√™n Qu√¢n Mobile': 'lienquan.html'
};

// Simple SHA-256 hash function
async function hashPassword(password) {
  const msgBuffer = new TextEncoder().encode(password);
  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

function goToCheckout() {
  const cart = JSON.parse(localStorage.getItem('cart') || '[]');
  if (cart.length === 0) {
    showToast('Gi·ªè h√†ng tr·ªëng! Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.', 'error');
    return;
  }
  localStorage.setItem('checkoutItems', JSON.stringify(cart));
  window.location.href = 'checkout.html';
}

function showToast(message, type = 'success') {
  const toast = document.getElementById('toast');
  if (toast) {
    toast.textContent = message;
    toast.className = `toast ${type}`;
    toast.style.display = 'block';
    setTimeout(() => { toast.style.display = 'none'; }, 3000);
  }
}

function toggleTheme() {
  document.body.classList.toggle('light-theme');
  const themeToggle = document.querySelector('.theme-toggle');
  themeToggle.textContent = document.body.classList.contains('light-theme') ? '‚òÄÔ∏è' : 'üåô';
  localStorage.setItem('theme', document.body.classList.contains('light-theme') ? 'light' : 'dark');
}

function loadTheme() {
  const theme = localStorage.getItem('theme');
  if (theme === 'light') {
    document.body.classList.add('light-theme');
    document.querySelector('.theme-toggle').textContent = '‚òÄÔ∏è';
  }
}

function toggleContextMenu(event, type, index) {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y!', 'error');
    return;
  }
  event.preventDefault();
  const contextMenu = document.getElementById(`${type}-context-menu`);
  if (contextMenu) {
    contextMenu.style.top = `${event.clientY}px`;
    contextMenu.style.left = `${event.clientX}px`;
    contextMenu.dataset[`${type}Index`] = index;
    contextMenu.classList.add('active');
    document.addEventListener('click', function hideMenu(e) {
      if (!contextMenu.contains(e.target)) {
        contextMenu.classList.remove('active');
        document.removeEventListener('click', hideMenu);
      }
    });
  }
}

function toggleLanguageMenu() {
  openModal('language-modal');
  loadLanguage();
}

function saveLanguage() {
  const selectedLang = document.querySelector('input[name="language"]:checked');
  if (selectedLang) {
    localStorage.setItem('language', selectedLang.value);
    showToast('ƒê√£ l∆∞u ng√¥n ng·ªØ!');
    closeModal('language-modal');
  } else {
    showToast('Vui l√≤ng ch·ªçn ng√¥n ng·ªØ!', 'error');
  }
}

function loadLanguage() {
  const lang = localStorage.getItem('language') || 'vi';
  const radio = document.querySelector(`input[name="language"][value="${lang}"]`);
  if (radio) radio.checked = true;
}

function openModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.add('active');
    if (modalId === 'top-up-modal') {
      initTopUpModal();
    }
  }
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.remove('active');
  }
}

function openAuthModal() {
  isSignUpMode = false;
  updateAuthModal();
  openModal('auth-modal');
}

function toggleAuthMode() {
  isSignUpMode = !isSignUpMode;
  updateAuthModal();
}

function updateAuthModal() {
  const modalTitle = document.getElementById('modal-title');
  const authButton = document.querySelector('#auth-modal .neon-btn');
  const toggleText = document.querySelector('.toggle-auth');
  if (modalTitle && authButton && toggleText) {
    modalTitle.textContent = isSignUpMode ? 'ƒêƒÉng k√Ω' : 'ƒêƒÉng nh·∫≠p';
    authButton.textContent = isSignUpMode ? 'ƒêƒÉng k√Ω' : 'X√°c nh·∫≠n';
    toggleText.textContent = isSignUpMode ? 'ƒê√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p ngay!' : 'Ch∆∞a c√≥ t√†i kho·∫£n? ƒêƒÉng k√Ω!';
  }
}

function openAdminModal() {
  openModal('admin-modal');
}

function openSearchModal() {
  openModal('search-modal');
}

function openTopUpModal() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi n·∫°p ti·ªÅn!', 'error');
    openModal('auth-modal');
    return;
  }
  openModal('top-up-modal');
}

function initTopUpModal() {
  const paymentMethods = document.querySelectorAll('input[name="payment-method"]');
  const forms = {
    card: document.getElementById('card-payment'),
    bank: document.getElementById('bank-payment'),
    wallet: document.getElementById('wallet-payment'),
    credit: document.getElementById('credit-payment')
  };

  paymentMethods.forEach(method => {
    method.addEventListener('change', () => {
      Object.values(forms).forEach(form => form.style.display = 'none');
      forms[method.value].style.display = 'flex';
    });
  });

  forms.card.style.display = 'flex';
  Object.keys(forms).forEach(key => {
    if (key !== 'card') forms[key].style.display = 'none';
  });

  // Preview bi√™n lai trong modal n·∫°p ti·ªÅn
  const bankReceiptInput = document.getElementById('bank-receipt');
  const bankReceiptPreview = document.getElementById('bank-receipt-preview');
  if (bankReceiptInput && bankReceiptPreview) {
    bankReceiptInput.addEventListener('change', () => {
      const file = bankReceiptInput.files[0];
      if (file && file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          bankReceiptPreview.src = e.target.result;
          bankReceiptPreview.style.display = 'block';
        };
        reader.readAsDataURL(file);
      } else {
        bankReceiptPreview.style.display = 'none';
        showToast('Vui l√≤ng ch·ªçn file ·∫£nh!', 'error');
      }
    });
  }
}

function processTopUp() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi n·∫°p ti·ªÅn!', 'error');
    openAuthModal();
    closeModal('top-up-modal');
    return;
  }

  const selectedMethod = document.querySelector('input[name="payment-method"]:checked')?.value;
  if (!selectedMethod) {
    showToast('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!', 'error');
    closeModal('top-up-modal');
    return;
  }

  let transaction = {
    id: Date.now().toString(),
    username: user.username,
    method: selectedMethod,
    date: new Date().toISOString(),
    status: 'pending'
  };
  let amount = 0;

  try {
    if (selectedMethod === 'card') {
      const cardType = document.getElementById('card-type').value;
      const cardCode = document.getElementById('card-code').value.trim();
      const cardSerial = document.getElementById('card-serial').value.trim();
      if (!cardCode || !cardSerial) {
        showToast('Vui l√≤ng nh·∫≠p m√£ th·∫ª v√† s·ªë seri!', 'error');
        closeModal('top-up-modal');
        return;
      }
      if (!/^\d{12,16}$/.test(cardCode) || !/^\d{10,14}$/.test(cardSerial)) {
        showToast('M√£ th·∫ª ho·∫∑c s·ªë seri kh√¥ng h·ª£p l·ªá!', 'error');
        closeModal('top-up-modal');
        return;
      }
      amount = 100000; // Gi·∫£ l·∫≠p
      transaction = { ...transaction, cardType, cardCode, cardSerial, amount };
      finalizeTopUp(transaction);
    } else if (selectedMethod === 'bank') {
      amount = parseInt(document.getElementById('bank-amount').value) || 0;
      const receipt = document.getElementById('bank-receipt').files[0];
      if (amount <= 0) {
        showToast('S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!', 'error');
        closeModal('top-up-modal');
        return;
      }
      if (!receipt || !receipt.type.startsWith('image/')) {
        showToast('Vui l√≤ng t·∫£i l√™n bi√™n lai l√† file ·∫£nh!', 'error');
        closeModal('top-up-modal');
        return;
      }
      const reader = new FileReader();
      reader.onload = (e) => {
        const dataUrl = e.target.result;
        if (!dataUrl || !dataUrl.startsWith('data:image/')) {
          showToast('Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh bi√™n lai!', 'error');
          closeModal('top-up-modal');
          return;
        }
        transaction = { ...transaction, amount, receiptName: receipt.name, receiptDataUrl: dataUrl };
        finalizeTopUp(transaction);
      };
      reader.onerror = () => {
        showToast('L·ªói khi ƒë·ªçc file ·∫£nh bi√™n lai!', 'error');
        closeModal('top-up-modal');
      };
      reader.readAsDataURL(receipt);
      return; // Ch·ªù b·∫•t ƒë·ªìng b·ªô
    } else if (selectedMethod === 'wallet') {
      const walletId = document.getElementById('wallet-id').value.trim();
      amount = parseInt(document.getElementById('wallet-amount').value) || 0;
      if (!walletId || amount <= 0) {
        showToast('Vui l√≤ng nh·∫≠p ID v√≠ v√† s·ªë ti·ªÅn h·ª£p l·ªá!', 'error');
        closeModal('top-up-modal');
        return;
      }
      transaction = { ...transaction, walletId, amount };
      finalizeTopUp(transaction);
    } else if (selectedMethod === 'credit') {
      const cardNumber = document.getElementById('credit-card-number').value.trim();
      const expiry = document.getElementById('credit-expiry').value.trim();
      const cvv = document.getElementById('credit-cvv').value.trim();
      if (!cardNumber || !expiry || !cvv) {
        showToast('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin th·∫ª t√≠n d·ª•ng!', 'error');
        closeModal('top-up-modal');
        return;
      }
      if (!/^\d{16}$/.test(cardNumber) || !/^\d{2}\/\d{2}$/.test(expiry) || !/^\d{3}$/.test(cvv)) {
        showToast('Th√¥ng tin th·∫ª t√≠n d·ª•ng kh√¥ng h·ª£p l·ªá!', 'error');
        closeModal('top-up-modal');
        return;
      }
      amount = 100000; // Gi·∫£ l·∫≠p
      transaction = { ...transaction, cardNumber: cardNumber.slice(-4), amount };
      finalizeTopUp(transaction);
    }
  } catch (error) {
    showToast(`L·ªói x·ª≠ l√Ω giao d·ªãch: ${error.message}`, 'error');
    closeModal('top-up-modal');
  }
}

function finalizeTopUp(transaction) {
  let topupTransactions = JSON.parse(localStorage.getItem('topupTransactions') || '[]');
  topupTransactions.push(transaction);
  localStorage.setItem('topupTransactions', JSON.stringify(topupTransactions));
  let admin = JSON.parse(localStorage.getItem('admin') || '{}');
  admin.topupRequests = admin.topupRequests || [];
  admin.topupRequests.unshift(transaction);
  localStorage.setItem('admin', JSON.stringify(admin));
  let users = JSON.parse(localStorage.getItem('users') || '[]');
  let user = users.find(u => u.username === transaction.username);
  if (user) {
    user.notifications = user.notifications || [];
    user.notifications.unshift({
      message: `Giao d·ªãch n·∫°p ti·ªÅn ${transaction.amount.toLocaleString('vi-VN')} VNƒê ƒëang ch·ªù duy·ªát.`,
      date: new Date().toLocaleString(),
      type: 'topup',
      status: 'pending'
    });
    user.topUpHistory = user.topUpHistory || [];
    user.topUpHistory.push(transaction);
    localStorage.setItem('users', JSON.stringify(users));
    let current = JSON.parse(localStorage.getItem('user') || '{}');
    if (current.username === user.username) localStorage.setItem('user', JSON.stringify(user));
  }
  closeModal('top-up-modal');
  showToast('Giao d·ªãch n·∫°p ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i, ƒëang ch·ªù duy·ªát!');
  setTimeout(() => window.location.href = 'account.html', 1200);
}

function processPayment() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n!', 'error');
    openAuthModal();
    return;
  }

  if (!user.shippingAddress || !user.phone) {
    showToast('Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ v√† s·ªë ƒëi·ªán tho·∫°i trong t√†i kho·∫£n!', 'error');
    return;
  }

  const selectedItems = JSON.parse(localStorage.getItem('checkoutItems') || '[]');
  if (selectedItems.length === 0) {
    showToast('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ thanh to√°n!', 'error');
    window.location.href = 'cart.html';
    return;
  }

  let total = selectedItems.reduce((sum, item) => {
    const selectedOption = item.options.find(opt => opt.value === item.selectedOption);
    const price = selectedOption ? selectedOption.price : 0;
    return sum + price * item.quantity;
  }, 0);

  if (total <= 0) {
    showToast('L·ªói t√≠nh ti·ªÅn! Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    return;
  }

  if (user.balance < total) {
    showToast('S·ªë d∆∞ kh√¥ng ƒë·ªß! Vui l√≤ng n·∫°p th√™m ti·ªÅn.', 'error');
    window.location.href = 'index.html';
    return;
  }

  user.balance -= total;
  user.orders = user.orders || [];
  user.orders.push({
    id: Date.now().toString(),
    date: new Date().toISOString(),
    items: selectedItems,
    total: total,
    status: 'pending'
  });

  updateUserData(user);

  let cachedCart = JSON.parse(localStorage.getItem('cart') || '[]');
  const selectedItemIds = selectedItems.map(item => item.id);
  cachedCart = cachedCart.filter(item => !selectedItemIds.includes(item.id));
  localStorage.setItem('cart', JSON.stringify(cachedCart));

  localStorage.removeItem('checkoutItems');

  showToast('Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.');
  setTimeout(() => window.location.href = 'account.html', 3000);
}

function openAddGameModal() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ th√™m game!', 'error');
    return;
  }
  currentEditGameIndex = null;
  const imageUrlInput = document.getElementById('game-image-url');
  const gameNameInput = document.getElementById('game-name');
  const imagePreview = document.getElementById('game-image-preview');
  if (imageUrlInput && gameNameInput && imagePreview) {
    imageUrlInput.value = '';
    gameNameInput.value = '';
    imagePreview.src = 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/add.png';
  }
  openModal('add-game-modal');
}

function openAddProductModal() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ th√™m s·∫£n ph·∫©m!', 'error');
    return;
  }
  currentEditProductId = null;
  const idInput = document.getElementById('product-id');
  const nameInput = document.getElementById('product-name');
  const gameSelect = document.getElementById('product-game');
  const priceInput = document.getElementById('product-price');
  const imageUrlInput = document.getElementById('product-image-url');
  const imagePreview = document.getElementById('product-image-preview');
  if (idInput && nameInput && gameSelect && priceInput && imageUrlInput && imagePreview) {
    idInput.value = '';
    nameInput.value = '';
    gameSelect.value = 'Roblox';
    priceInput.value = '';
    imageUrlInput.value = '';
    imagePreview.src = 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/add.png';
  }
  openModal('add-product-modal');
}

function openSetHotDealTimeModal() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a hot deal!', 'error');
    return;
  }
  const inputs = ['hot-deal-days', 'hot-deal-hours', 'hot-deal-minutes', 'hot-deal-seconds'];
  inputs.forEach(id => {
    const input = document.getElementById(id);
    if (input) input.value = '';
  });
  openModal('set-hot-deal-time-modal');
}

function validateImageUrl(url, callback) {
  const img = new Image();
  img.onload = () => callback(true);
  img.onerror = () => callback(false);
  img.src = url;
}

function previewAvatar() {
  const url = document.getElementById('avatar-url').value.trim();
  const avatarImg = document.getElementById('account-avatar');
  if (url && avatarImg) {
    validateImageUrl(url, (isValid) => {
      avatarImg.src = isValid ? url : 'https://via.placeholder.com/100?text=Invalid+Image';
    });
  }
}

function updateGameImagePreview() {
  if (!isAdmin) return;
  const url = document.getElementById('game-image-url').value;
  const preview = document.getElementById('game-image-preview');
  if (url && preview) {
    validateImageUrl(url, (isValid) => {
      preview.src = isValid ? url : 'https://via.placeholder.com/150?text=Invalid+Image';
    });
  }
}

function updateProductImagePreview() {
  if (!isAdmin) return;
  const url = document.getElementById('product-image-url').value;
  const preview = document.getElementById('product-image-preview');
  if (url && preview) {
    validateImageUrl(url, (isValid) => {
      preview.src = isValid ? url : 'https://via.placeholder.com/150?text=Invalid+Image';
    });
  }
}

function updateBannerImagePreview() {
  if (!isAdmin) return;
  const url = document.getElementById('banner-image-url').value;
  const preview = document.getElementById('banner-image-preview');
  if (url && preview) {
    validateImageUrl(url, (isValid) => {
      preview.src = isValid ? url : 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/gamer.png?text=Invalid+Image';
    });
  }
}

function saveGame() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ l∆∞u game!', 'error');
    return;
  }
  const url = document.getElementById('game-image-url').value;
  const name = document.getElementById('game-name').value;
  if (!url || !name) {
    showToast('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß URL ·∫£nh v√† t√™n game!', 'error');
    return;
  }
  validateImageUrl(url, (isValid) => {
    if (!isValid) {
      showToast('URL ·∫£nh kh√¥ng h·ª£p l·ªá!', 'error');
      return;
    }
    cachedGames = cachedGames || JSON.parse(localStorage.getItem('gamesData') || '[]');
    if (currentEditGameIndex !== null) {
      cachedGames[currentEditGameIndex] = { name, image: url };
    } else {
      cachedGames.push({ name, image: url });
    }
    localStorage.setItem('gamesData', JSON.stringify(cachedGames));
    loadGames();
    closeModal('add-game-modal');
    showToast('ƒê√£ l∆∞u game th√†nh c√¥ng!');
  });
}

function saveProduct() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ l∆∞u s·∫£n ph·∫©m!', 'error');
    return;
  }
  const id = currentEditProductId || Date.now().toString();
  const name = document.getElementById('product-name').value.trim();
  const game = document.getElementById('product-game').value;
  const price = parseInt(document.getElementById('product-price').value);
  const imageUrl = document.getElementById('product-image-url').value.trim();
  if (!name || !price || !imageUrl) {
    showToast('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m!', 'error');
    return;
  }
  if (price <= 0) {
    showToast('Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0!', 'error');
    return;
  }
  validateImageUrl(imageUrl, (isValid) => {
    if (!isValid) {
      showToast('URL ·∫£nh kh√¥ng h·ª£p l·ªá!', 'error');
      return;
    }
    cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
    if (currentEditProductId) {
      cachedProducts = cachedProducts.map(p => p.id === currentEditProductId ? { id, name, game, price, image: imageUrl } : p);
    } else {
      cachedProducts.push({ id, name, game, price, image: imageUrl });
    }
    localStorage.setItem('productsData', JSON.stringify(cachedProducts));
    loadProducts();
    closeModal('add-product-modal');
    showToast('ƒê√£ l∆∞u s·∫£n ph·∫©m th√†nh c√¥ng!');
  });
}

function editGame() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a game!', 'error');
    return;
  }
  const index = document.getElementById('game-context-menu').dataset.gameIndex;
  cachedGames = cachedGames || JSON.parse(localStorage.getItem('gamesData') || '[]');
  if (cachedGames[index]) {
    currentEditGameIndex = parseInt(index);
    const imageUrlInput = document.getElementById('game-image-url');
    const gameNameInput = document.getElementById('game-name');
    const imagePreview = document.getElementById('game-image-preview');
    if (imageUrlInput && gameNameInput && imagePreview) {
      imageUrlInput.value = cachedGames[index].image;
      gameNameInput.value = cachedGames[index].name;
      imagePreview.src = cachedGames[index].image;
    }
    openModal('add-game-modal');
  }
}

function editProduct() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a s·∫£n ph·∫©m!', 'error');
    return;
  }
  const index = document.getElementById('product-context-menu').dataset.productIndex;
  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
  if (cachedProducts[index]) {
    const product = cachedProducts[index];
    currentEditProductId = product.id;
    const idInput = document.getElementById('product-id');
    const nameInput = document.getElementById('product-name');
    const gameSelect = document.getElementById('product-game');
    const priceInput = document.getElementById('product-price');
    const imageUrlInput = document.getElementById('product-image-url');
    const imagePreview = document.getElementById('product-image-preview');
    if (idInput && nameInput && gameSelect && priceInput && imageUrlInput && imagePreview) {
      idInput.value = product.id;
      nameInput.value = product.name;
      gameSelect.value = product.game;
      priceInput.value = product.price;
      imageUrlInput.value = product.image;
      imagePreview.src = product.image;
    }
    openModal('add-product-modal');
  }
}

function deleteGame() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ x√≥a game!', 'error');
    return;
  }
  const index = document.getElementById('game-context-menu').dataset.gameIndex;
  if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a game n√†y?')) {
    cachedGames = cachedGames || JSON.parse(localStorage.getItem('gamesData') || '[]');
    cachedGames.splice(index, 1);
    localStorage.setItem('gamesData', JSON.stringify(cachedGames));
    loadGames();
    showToast('ƒê√£ x√≥a game!');
  }
}

function deleteProduct() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ x√≥a s·∫£n ph·∫©m!', 'error');
    return;
  }
  const index = document.getElementById('product-context-menu').dataset.productIndex;
  if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?')) {
    cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
    cachedProducts.splice(index, 1);
    localStorage.setItem('productsData', JSON.stringify(cachedProducts));
    loadProducts();
    showToast('ƒê√£ x√≥a s·∫£n ph·∫©m!');
  }
}

function saveBanner() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ l∆∞u banner!', 'error');
    return;
  }
  const url = document.getElementById('banner-image-url').value;
  if (!url) {
    showToast('Vui l√≤ng nh·∫≠p URL ·∫£nh banner!', 'error');
    return;
  }
  validateImageUrl(url, (isValid) => {
    if (!isValid) {
      showToast('URL ·∫£nh banner kh√¥ng h·ª£p l·ªá!', 'error');
      return;
    }
    cachedBanners = cachedBanners || JSON.parse(localStorage.getItem('bannersData') || '[]');
    if (cachedBanners[currentEditBannerIndex]) {
      cachedBanners[currentEditBannerIndex].image = url;
      localStorage.setItem('bannersData', JSON.stringify(cachedBanners));
      loadBanners();
      closeModal('edit-banner-modal');
      showToast('ƒê√£ l∆∞u banner th√†nh c√¥ng!');
    }
  });
}

function editBanner() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a banner!', 'error');
    return;
  }
  const index = document.getElementById('banner-context-menu').dataset.bannerIndex;
  cachedBanners = cachedBanners || JSON.parse(localStorage.getItem('bannersData') || '[]');
  if (cachedBanners[index]) {
    currentEditBannerIndex = parseInt(index);
    const imageUrlInput = document.getElementById('banner-image-url');
    const imagePreview = document.getElementById('banner-image-preview');
    if (imageUrlInput && imagePreview) {
      imageUrlInput.value = cachedBanners[index].image;
      imagePreview.src = cachedBanners[index].image;
    }
    openModal('edit-banner-modal');
  }
}

function saveHotDealTime() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a hot deal!', 'error');
    return;
  }
  const days = parseInt(document.getElementById('hot-deal-days').value) || 0;
  const hours = parseInt(document.getElementById('hot-deal-hours').value) || 0;
  const minutes = parseInt(document.getElementById('hot-deal-minutes').value) || 0;
  const seconds = parseInt(document.getElementById('hot-deal-seconds').value) || 0;
  const totalSeconds = days * 86400 + hours * 3600 + minutes * 60 + seconds;
  if (totalSeconds <= 0) {
    showToast('Vui l√≤ng nh·∫≠p th·ªùi gian h·ª£p l·ªá (√≠t nh·∫•t 1 gi√¢y)!', 'error');
    return;
  }
  const endTime = new Date(Date.now() + totalSeconds * 1000).toISOString();
  localStorage.setItem('hotDealEndTime', endTime);
  loadHotDeals();
  closeModal('set-hot-deal-time-modal');
  showToast('ƒê√£ set th·ªùi gian hot deal th√†nh c√¥ng!');
}

function startHotDealCountdown() {
  const countdownElement = document.getElementById('hot-deal-countdown');
  if (!countdownElement) return;
  if (countdownInterval) clearInterval(countdownInterval);
  countdownInterval = setInterval(() => {
    const endTime = localStorage.getItem('hotDealEndTime');
    if (!endTime || new Date(endTime) < new Date()) {
      countdownElement.textContent = '';
      clearInterval(countdownInterval);
      loadHotDeals();
      return;
    }
    const timeLeft = new Date(endTime) - new Date();
    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
    countdownElement.textContent = `${days} ng√†y ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }, 1000);
}

function prevSlide(section) {
  const carouselInner = document.querySelector(`#${section} .carousel-inner`);
  const items = carouselInner.querySelectorAll('.carousel-item');
  currentCategorySlide = (currentCategorySlide - 1 + items.length) % items.length;
  carouselInner.style.transform = `translateX(-${currentCategorySlide * 100 / items.length}%)`;
}

function nextSlide(section) {
  const carouselInner = document.querySelector(`#${section} .carousel-inner`);
  const items = carouselInner.querySelectorAll('.carousel-item');
  currentCategorySlide = (currentCategorySlide + 1) % items.length;
  carouselInner.style.transform = `translateX(-${currentCategorySlide * 100 / items.length}%)`;
}

function checkLoginStatus() {
  cachedUsers = cachedUsers || JSON.parse(localStorage.getItem('users') || '[]');
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const authButtons = document.querySelector('.auth-buttons');
  const userInfo = document.querySelector('.user-info');
  if (user && user.username) {
    if (authButtons) authButtons.style.display = 'none';
    if (userInfo) {
      userInfo.style.display = 'inline-flex';
      userInfo.querySelector('.username').textContent = user.username;
      userInfo.querySelector('.user-avatar').src = user.avatar || 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/gamer.png';
    }
  } else {
    if (authButtons) authButtons.style.display = 'flex';
    if (userInfo) userInfo.style.display = 'none';
    if (window.location.pathname.includes('account.html') || window.location.pathname.includes('manage_products.html')) {
      showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y!', 'error');
      window.location.href = 'index.html';
    }
  }
  toggleAdminFeatures();
  loadTheme();
}

function goToAccount() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (user && user.username) {
    window.location.href = 'account.html';
  } else {
    openAuthModal();
  }
}

function goToCart() {
  window.location.href = 'cart.html';
}

async function handleAuth() {
  const usernameInput = document.getElementById('auth-username');
  const passwordInput = document.getElementById('auth-password');
  if (!usernameInput || !passwordInput) {
    showToast('L·ªói h·ªá th·ªëng: Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng nh·∫≠p li·ªáu!', 'error');
    return;
  }
  const username = usernameInput.value.trim();
  const password = passwordInput.value.trim();
  if (!username || !password) {
    showToast('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u!', 'error');
    return;
  }
  cachedUsers = cachedUsers || JSON.parse(localStorage.getItem('users') || '[]');
  if (isSignUpMode) {
    if (cachedUsers.find(u => u.username === username)) {
      showToast('T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!', 'error');
      return;
    }
    const hashedPassword = await hashPassword(password);
    const newUser = {
      username,
      password: hashedPassword,
      createdAt: new Date().toISOString(),
      gender: 'male',
      email: '',
      phone: '',
      avatar: 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/gamer.png',
      notifications: [],
      serverNotifications: [],
      orders: [],
      vouchers: []
    };
    cachedUsers.push(newUser);
    localStorage.setItem('users', JSON.stringify(cachedUsers));
    localStorage.setItem('user', JSON.stringify(newUser));
    closeModal('auth-modal');
    checkLoginStatus();
    showToast('ƒêƒÉng k√Ω th√†nh c√¥ng!');
  } else {
    const hashedPassword = await hashPassword(password);
    const user = cachedUsers.find(u => u.username === username && u.password === hashedPassword);
    if (user) {
      localStorage.setItem('user', JSON.stringify(user));
      closeModal('auth-modal');
      checkLoginStatus();
      showToast('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
    } else {
      showToast('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!', 'error');
    }
  }
}

async function changePassword() {
  const currentPassword = document.getElementById('current-password').value.trim();
  const newPassword = document.getElementById('new-password').value.trim();
  const confirmPassword = document.getElementById('confirm-password').value.trim();
  if (!currentPassword || !newPassword || !confirmPassword) {
    showToast('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng m·∫≠t kh·∫©u!', 'error');
    return;
  }
  if (newPassword !== confirmPassword) {
    showToast('M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp!', 'error');
    return;
  }
  if (newPassword.length < 6) {
    showToast('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!', 'error');
    return;
  }
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const hashedCurrentPassword = await hashPassword(currentPassword);
  if (hashedCurrentPassword !== user.password) {
    showToast('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!', 'error');
    return;
  }
  const hashedNewPassword = await hashPassword(newPassword);
  user.password = hashedNewPassword;
  updateUserData(user);
  document.getElementById('current-password').value = '';
  document.getElementById('new-password').value = '';
  document.getElementById('confirm-password').value = '';
  showToast('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
}

function handleAdminLogin() {
  const key1 = document.getElementById('admin-key1').value;
  const key2 = document.getElementById('admin-key2').value;
  const key3 = document.getElementById('admin-key3').value;
  if (key1 === adminKeys.key1 && key2 === adminKeys.key2 && key3 === adminKeys.key3) {
    isAdmin = true;
    localStorage.setItem('isAdmin', 'true');
    closeModal('admin-modal');
    toggleAdminFeatures();
    showToast('ƒêƒÉng nh·∫≠p qu·∫£n tr·ªã vi√™n th√†nh c√¥ng!');
  } else {
    showToast('M·∫≠t kh·∫©u qu·∫£n tr·ªã vi√™n kh√¥ng ƒë√∫ng!', 'error');
  }
}

function logoutAdmin() {
  isAdmin = false;
  localStorage.setItem('isAdmin', 'false');
  toggleAdminFeatures();
  showToast('ƒê√£ ƒëƒÉng xu·∫•t qu·∫£n tr·ªã vi√™n!');
}

function toggleAdminFeatures() {
  const adminElements = document.querySelectorAll('.admin-only');
  adminElements.forEach(el => {
    el.style.display = isAdmin ? 'block' : 'none';
  });
}

function saveTopUpTransaction(user, transaction) {
  user.topUpHistory = user.topUpHistory || [];
  user.topUpHistory.push(transaction);
  updateUserData(user);
}

function updateUserData(user) {
  let cachedUsers = JSON.parse(localStorage.getItem('users') || '[]');
  cachedUsers = cachedUsers.map(u => u.username === user.username ? user : u);
  localStorage.setItem('users', JSON.stringify(cachedUsers));
  localStorage.setItem('user', JSON.stringify(user));
}

function deleteUser() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n "${user.username}"?`)) {
    cachedUsers = cachedUsers || JSON.parse(localStorage.getItem('users') || '[]');
    cachedUsers = cachedUsers.filter(u => u.username !== user.username);
    localStorage.setItem('users', JSON.stringify(cachedUsers));
    showToast('T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a!');
    logout();
  }
}

function logout() {
  isAdmin = false;
  localStorage.removeItem('user');
  localStorage.setItem('isAdmin', 'false');
  checkLoginStatus();
  window.location.href = 'index.html';
}

function loadCart() {
  const cartItemsContainer = document.getElementById('cart-items');
  const cartCount = document.getElementById('cart-count');
  const cartTotal = document.getElementById('cart-total');
  const cartEmptyMessage = document.getElementById('cart-empty-message');
  if (!cartItemsContainer || !cartCount || !cartTotal || !cartEmptyMessage) return;

  let cachedCart = JSON.parse(localStorage.getItem('cart') || '[]');
  cartItemsContainer.innerHTML = '';
  if (cachedCart.length === 0) {
    cartEmptyMessage.style.display = 'block';
    cartCount.textContent = '0';
    cartTotal.textContent = 'T·ªïng: ƒë0';
    return;
  }

  cartEmptyMessage.style.display = 'none';
  cartCount.textContent = cachedCart.length;
  let total = 0;

  cachedCart.forEach(item => {
    const selectedOption = item.options.find(opt => opt.value === item.selectedOption);
    const price = selectedOption ? selectedOption.price : 0;
    const subtotal = price * item.quantity;
    total += subtotal;

    const div = document.createElement('div');
    div.className = 'cart-product-item neon-card';
    div.innerHTML = `
      <img src="${item.image || 'https://via.placeholder.com/150?text=Error'}" alt="${item.name}" class="cart-product-image" onerror="this.src='https://via.placeholder.com/150?text=Error';">
      <div class="cart-product-info">
        <h4>${item.name}</h4>
        <p>Ph√¢n lo·∫°i: ${item.selectedOption}</p>
        <p>ƒê∆°n gi√°: ƒë${price.toLocaleString()}</p>
      </div>
      <div class="cart-product-quantity">
        <div class="quantity-control">
          <button class="neon-btn" onclick="updateCartItemQuantity('${item.id}', -1)">-</button>
          <input type="number" class="neon-input" value="${item.quantity}" min="1" onchange="updateCartItemQuantity('${item.id}', this.value)">
          <button class="neon-btn" onclick="updateCartItemQuantity('${item.id}', 1)">+</button>
        </div>
        <p>T·ªïng gi√°: ƒë${subtotal.toLocaleString()}</p>
      </div>
      <button class="neon-btn danger" onclick="removeFromCart('${item.id}')">X√≥a</button>
    `;
    cartItemsContainer.appendChild(div);
  });

  cartTotal.textContent = `T·ªïng: ƒë${total.toLocaleString()}`;
}

function loadCartItems() {
  const cartItemsContainer = document.getElementById('cart-items');
  if (!cartItemsContainer) return;

  let cachedCart = JSON.parse(localStorage.getItem('cart') || '[]');
  cartItemsContainer.innerHTML = '';
  cachedCart.forEach(item => {
    const selectedOption = item.options.find(opt => opt.value === item.selectedOption);
    const price = selectedOption ? selectedOption.price : 0;
    const subtotal = price * item.quantity;

    const div = document.createElement('div');
    div.className = 'cart-product-item neon-card';
    div.innerHTML = `
      <img src="${item.image || 'https://via.placeholder.com/150?text=Error'}" alt="${item.name}" class="cart-product-image" onerror="this.src='https://via.placeholder.com/150?text=Error';">
      <div class="cart-product-info">
        <h4>${item.name}</h4>
        <p>Ph√¢n lo·∫°i: ${item.selectedOption}</p>
        <p>ƒê∆°n gi√°: ƒë${price.toLocaleString()}</p>
      </div>
      <div class="cart-product-quantity">
        <div class="quantity-control">
          <button class="neon-btn" onclick="updateCartItemQuantity('${item.id}', -1)">-</button>
          <input type="number" class="neon-input" value="${item.quantity}" min="1" onchange="updateCartItemQuantity('${item.id}', this.value)">
          <button class="neon-btn" onclick="updateCartItemQuantity('${item.id}', 1)">+</button>
        </div>
        <p>T·ªïng gi√°: ƒë${subtotal.toLocaleString()}</p>
      </div>
      <button class="neon-btn danger" onclick="removeFromCart('${item.id}')">X√≥a</button>
    `;
    cartItemsContainer.appendChild(div);
  });
}

function updateCartItemQuantity(itemId, quantity) {
  quantity = parseInt(quantity) || 1;
  if (quantity < 1) quantity = 1;
  let cachedCart = JSON.parse(localStorage.getItem('cart') || '[]');
  cachedCart = cachedCart.map(item => item.id === itemId ? { ...item, quantity } : item);
  localStorage.setItem('cart', JSON.stringify(cachedCart));
  loadCartItems();
}

function removeFromCart(itemId) {
  let cachedCart = JSON.parse(localStorage.getItem('cart') || '[]');
  cachedCart = cachedCart.filter(item => item.id !== itemId);
  localStorage.setItem('cart', JSON.stringify(cachedCart));
  loadCartItems();
}

function handleCheckout() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  
  // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  if (!user.username) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n!', 'error');
    openAuthModal();
    return;
  }

  // Ki·ªÉm tra th√¥ng tin giao h√†ng
  if (!user.shippingAddress || !user.phone) {
    showToast('Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ v√† s·ªë ƒëi·ªán tho·∫°i trong t√†i kho·∫£n!', 'error');
    window.location.href = 'account.html';
    return;
  }

  // L·∫•y to√†n b·ªô gi·ªè h√†ng
  const cart = JSON.parse(localStorage.getItem('cart') || '[]');
  if (cart.length === 0) {
    showToast('Gi·ªè h√†ng tr·ªëng! Vui l√≤ng th√™m s·∫£n ph·∫©m.', 'error');
    window.location.href = 'cart.html';
    return;
  }

  // T√≠nh t·ªïng ti·ªÅn
  let total = cart.reduce((sum, item) => {
    const selectedOption = item.options.find(opt => opt.value === item.selectedOption);
    const price = selectedOption ? selectedOption.price : 0;
    return sum + price * item.quantity;
  }, 0);

  if (total <= 0) {
    showToast('L·ªói t√≠nh ti·ªÅn! Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    return;
  }

  // Ki·ªÉm tra s·ªë d∆∞
  if (user.balance < total) {
    showToast('S·ªë d∆∞ kh√¥ng ƒë·ªß! Vui l√≤ng n·∫°p th√™m ti·ªÅn.', 'error');
    openTopUpModal();
    return;
  }

  // C·∫≠p nh·∫≠t s·ªë d∆∞ v√† t·∫°o ƒë∆°n h√†ng
  user.balance -= total;
  user.orders = user.orders || [];
  user.orders.push({
    id: Date.now().toString(),
    date: new Date().toISOString(),
    items: cart,
    total: total,
    status: 'pending'
  });

  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  updateUserData(user);

  // X√≥a gi·ªè h√†ng
  localStorage.setItem('cart', JSON.stringify([]));

  // Hi·ªÉn th·ªã th√¥ng b√°o v√† chuy·ªÉn h∆∞·ªõng
  showToast('Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.');
  setTimeout(() => window.location.href = 'account.html', 2000);
}

function loadGames() {
  const carousel = document.getElementById('game-carousel');
  if (!carousel) return;
  cachedGames = cachedGames || JSON.parse(localStorage.getItem('gamesData') || '[]');
  if (cachedGames.length === 0) {
    cachedGames = [
      { name: 'Roblox', image: 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/Roblox.jpg' },
      { name: 'Free Fire', image: 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/FreeFire.jpg' },
      { name: 'Li√™n Qu√¢n Mobile', image: 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/LQ.jpg' }
    ];
    localStorage.setItem('gamesData', JSON.stringify(cachedGames));
  }
  carousel.innerHTML = '';
  cachedGames.forEach((game, index) => {
    const div = document.createElement('div');
    div.className = 'carousel-item';
    div.dataset.index = index;
    const pageUrl = gamePageMap[game.name] || '#';
    div.innerHTML = `
      <a href="${pageUrl}">
        <img src="${game.image}" alt="${game.name}" onerror="this.src='https://i.imgur.com/ZARruCO.jpg';">
        <h3>${game.name}</h3>
      </a>
    `;
    if (isAdmin) {
      div.addEventListener('contextmenu', (e) => toggleContextMenu(e, 'game', index));
    }
    carousel.appendChild(div);
  });
}

function loadBanners() {
  const carousel = document.getElementById('banner-carousel');
  if (!carousel) return;
  cachedBanners = cachedBanners || JSON.parse(localStorage.getItem('bannersData') || '[]');
  if (cachedBanners.length === 0) {
    cachedBanners = [
      { title: 'Mua & B√°n V·∫≠t Ph·∫©m Huy·ªÅn Tho·∫°i Ngay!', desc: 'Kh√°m ph√° c√°c v·∫≠t ph·∫©m ƒë·ªôc ƒë√°o trong t·ª±a game y√™u th√≠ch c·ªßa b·∫°n.', image: 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/home_banner.png' },
      { title: 'H√® ƒë·∫øn! Sale ƒë·∫øn!', desc: 'Gi·∫£m 30% cho t·∫•t c·∫£ Gamepass t·∫°i Roblox shop!', image: 'https://raw.githubusercontent.com/Sokax-sys/Photos/master/Roblox_banner.jpg' }
    ];
    localStorage.setItem('bannersData', JSON.stringify(cachedBanners));
  }
  carousel.innerHTML = '';
  cachedBanners.forEach((banner, index) => {
    const div = document.createElement('div');
    div.className = `hero-slide ${index === 0 ? 'active' : ''}`;
    div.dataset.index = index;
    div.style.backgroundImage = `url('${banner.image}')`;
    div.style.backgroundSize = 'cover';
    div.style.backgroundPosition = 'center';
    div.innerHTML = `
      <div class="hero-content">
        <h1 class="neon-text">${banner.title}</h1>
        <p>${banner.desc}</p>
        <button class="neon-btn">Xem Th√™m</button>
      </div>
    `;
    if (isAdmin) {
      div.addEventListener('contextmenu', (e) => toggleContextMenu(e, 'banner', index));
    }
    carousel.appendChild(div);
  });
  carousel.innerHTML += `
    <button class="hero-control prev" onclick="prevBannerSlide()">‚óÑ</button>
    <button class="hero-control next" onclick="nextBannerSlide()">‚ñ∫</button>
  `;
}

function prevBannerSlide() {
  const slides = document.querySelectorAll('.hero-slide');
  slides[currentBannerSlide].classList.remove('active');
  currentBannerSlide = (currentBannerSlide - 1 + slides.length) % slides.length;
  slides[currentBannerSlide].classList.add('active');
}

function nextBannerSlide() {
  const slides = document.querySelectorAll('.hero-slide');
  slides[currentBannerSlide].classList.remove('active');
  currentBannerSlide = (currentBannerSlide + 1) % slides.length;
  slides[currentBannerSlide].classList.add('active');
}

function loadHotDeals() {
  const hotDealList = document.getElementById('hot-deal-list');
  const noHotDeals = document.getElementById('no-hot-deals');
  if (!hotDealList || !noHotDeals) return;
  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('selectedHotDealProducts') || '[]');
  const endTime = localStorage.getItem('hotDealEndTime');
  hotDealList.innerHTML = '';
  if (cachedProducts.length === 0 || !endTime || new Date(endTime) < new Date()) {
    noHotDeals.style.display = 'block';
    if (countdownInterval) clearInterval(countdownInterval);
    const countdownElement = document.getElementById('hot-deal-countdown');
    if (countdownElement) countdownElement.textContent = '';
  } else {
    noHotDeals.style.display = 'none';
    cachedProducts.forEach(product => {
      const div = document.createElement('div');
      div.className = 'hot-deal-item neon-card';
      div.innerHTML = `
        <img src="${product.image}" alt="${product.name}" onerror="this.src='https://raw.githubusercontent.com/Sokax-sys/Photos/master/Hot_deal.png';">
        <h4>${product.name}</h4>
        <p>Gi√°: ${product.price} VNƒê</p>
        <p>H·∫øt h·∫°n: ${new Date(endTime).toLocaleString()}</p>
        <button class="neon-btn" onclick="addToCart('Hot Deal', '${product.name}')">Th√™m v√†o gi·ªè</button>
      `;
      hotDealList.appendChild(div);
    });
    startHotDealCountdown();
  }
}

function loadTransactions() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ xem giao d·ªãch!', 'error');
    return;
  }
  const transactionList = document.getElementById('transaction-list');
  if (!transactionList) return;
  const admin = JSON.parse(localStorage.getItem('admin') || '{}');
  const transactions = admin.topupRequests || [];
  transactionList.innerHTML = '';
  if (transactions.length === 0) {
    transactionList.innerHTML = '<p style="color:#ffea00">Kh√¥ng c√≥ giao d·ªãch ch·ªù duy·ªát.</p>';
    return;
  }
  transactions.forEach((tx, idx) => {
    const div = document.createElement('div');
    div.className = 'transaction-item neon-card';
    let receiptHtml = tx.receiptDataUrl && tx.receiptDataUrl.startsWith('data:image/')
      ? `<img src="${tx.receiptDataUrl}" alt="Bi√™n lai" style="max-width: 100px; max-height: 100px; object-fit: cover; cursor: pointer;" onclick="showReceiptModal('${tx.receiptDataUrl.replace(/'/g, "\\'")}')">`
      : `<p>Kh√¥ng c√≥ bi√™n lai${tx.receiptName ? ': ' + tx.receiptName : ''}</p>`;
    div.innerHTML = `
      <div>
        <p>M√£ giao d·ªãch: ${tx.id || idx}</p>
        <p>Ng∆∞·ªùi d√πng: ${tx.username}</p>
        <p>S·ªë ti·ªÅn: ${(tx.amount || 0).toLocaleString('vi-VN')} VNƒê</p>
        <p>Ng√†y: ${new Date(tx.date).toLocaleString()}</p>
        <p>Tr·∫°ng th√°i: <span id="tx-status-${idx}">${tx.status}</span></p>
        ${receiptHtml}
      </div>
      <div class="transaction-actions">
        <button class="neon-btn" onclick="approveTopup(${idx})">Duy·ªát</button>
        <button class="neon-btn danger" onclick="rejectTopup(${idx})">T·ª´ ch·ªëi</button>
      </div>
    `;
    transactionList.appendChild(div);
  });
}

function approveTransaction(username, transactionId) {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ duy·ªát giao d·ªãch!', 'error');
    return;
  }
  cachedUsers = cachedUsers || JSON.parse(localStorage.getItem('users') || '[]');
  let user = cachedUsers.find(u => u.username === username);
  if (user && user.topUpHistory) {
    let transaction = user.topUpHistory.find(t => t.id === transactionId);
    if (transaction && transaction.status === 'pending') {
      transaction.status = 'approved';
      user.balance = (user.balance || 0) + transaction.amount;
      updateUserData(user);
      loadTransactions();
      showToast(`ƒê√£ duy·ªát giao d·ªãch ${transactionId}!`);
    }
  }
}

function approveTopup(idx) {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ duy·ªát giao d·ªãch!', 'error');
    return;
  }
  let admin = JSON.parse(localStorage.getItem('admin') || '{}');
  let tx = admin.topupRequests[idx];
  if (!tx || tx.status !== 'pending') return;
  tx.status = 'approved';
  let users = JSON.parse(localStorage.getItem('users') || '[]');
  let user = users.find(u => u.username === tx.username);
  if (user) {
    user.balance = (user.balance || 0) + (tx.amount || 0);
    user.notifications = user.notifications || [];
    user.notifications.unshift({
      message: `Giao d·ªãch n·∫°p ti·ªÅn ${tx.amount.toLocaleString('vi-VN')} VNƒê ƒë√£ ƒë∆∞·ª£c duy·ªát!`,
      date: new Date().toLocaleString(),
      type: 'topup',
      status: 'approved'
    });
    user.topUpHistory = user.topUpHistory || [];
    user.topUpHistory = user.topUpHistory.map(t => t.id === tx.id ? { ...t, status: 'approved' } : t);
    localStorage.setItem('users', JSON.stringify(users));
    let current = JSON.parse(localStorage.getItem('user') || '{}');
    if (current.username === user.username) localStorage.setItem('user', JSON.stringify(user));
  }
  admin.topupRequests.splice(idx, 1);
  localStorage.setItem('admin', JSON.stringify(admin));
  loadTransactions();
  showToast(`ƒê√£ duy·ªát giao d·ªãch ${tx.id || idx}!`);
}

function rejectTopup(idx) {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ t·ª´ ch·ªëi giao d·ªãch!', 'error');
    return;
  }
  let admin = JSON.parse(localStorage.getItem('admin') || '{}');
  let tx = admin.topupRequests[idx];
  if (!tx || tx.status !== 'pending') return;
  tx.status = 'rejected';
  let users = JSON.parse(localStorage.getItem('users') || '[]');
  let user = users.find(u => u.username === tx.username);
  if (user) {
    user.notifications = user.notifications || [];
    user.notifications.unshift({
      message: `Giao d·ªãch n·∫°p ti·ªÅn ${tx.amount.toLocaleString('vi-VN')} VNƒê ƒë√£ b·ªã t·ª´ ch·ªëi!`,
      date: new Date().toLocaleString(),
      type: 'topup',
      status: 'rejected'
    });
    user.topUpHistory = user.topUpHistory || [];
    user.topUpHistory = user.topUpHistory.map(t => t.id === tx.id ? { ...t, status: 'rejected' } : t);
    localStorage.setItem('users', JSON.stringify(users));
    let current = JSON.parse(localStorage.getItem('user') || '{}');
    if (current.username === user.username) localStorage.setItem('user', JSON.stringify(user));
  }
  admin.topupRequests.splice(idx, 1);
  localStorage.setItem('admin', JSON.stringify(admin));
  loadTransactions();
  showToast(`ƒê√£ t·ª´ ch·ªëi giao d·ªãch ${tx.id || idx}!`);
}

function rejectTransaction(username, transactionId) {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ t·ª´ ch·ªëi giao d·ªãch!', 'error');
    return;
  }
  cachedUsers = cachedUsers || JSON.parse(localStorage.getItem('users') || '[]');
  let user = cachedUsers.find(u => u.username === username);
  if (user && user.topUpHistory) {
    let transaction = user.topUpHistory.find(t => t.id === transactionId);
    if (transaction && transaction.status === 'pending') {
      transaction.status = 'rejected';
      updateUserData(user);
      loadTransactions();
      showToast(`ƒê√£ t·ª´ ch·ªëi giao d·ªãch ${transactionId}!`);
    }
  }
}

function loadProducts() {
  const productList = document.getElementById('product-list');
  if (!productList) return;
  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
  // S·ª≠ d·ª•ng key ri√™ng cho product.html
  let selectedProducts = [];
  if (window.location.pathname.includes('product.html')) {
    selectedProducts = JSON.parse(localStorage.getItem('selectedProductCards') || '[]');
  } else {
    selectedProducts = JSON.parse(localStorage.getItem('selectedHotDealProducts') || '[]');
  }
  productList.innerHTML = '';
  let filteredProducts = cachedProducts;
  if (window.location.pathname.includes('roblox.html')) {
    filteredProducts = cachedProducts.filter(p => p.game === 'Roblox');
  } else if (window.location.pathname.includes('freefire.html')) {
    filteredProducts = cachedProducts.filter(p => p.game === 'Free Fire');
  } else if (window.location.pathname.includes('lienquan.html')) {
    filteredProducts = cachedProducts.filter(p => p.game === 'Li√™n Qu√¢n Mobile');
  }
  filteredProducts.forEach((product, index) => {
    const div = document.createElement('div');
    div.className = `product-item neon-card ${selectedProducts.find(p => p.id === product.id) ? 'selected' : ''}`;
    div.dataset.id = product.id;
    div.dataset.index = index;
    div.innerHTML = `
      <img src="${product.image}" alt="${product.name}" onerror="showToast('L·ªói t·∫£i h√¨nh ·∫£nh s·∫£n ph·∫©m!', 'error'); this.src='https://via.placeholder.com/150?text=Error';">
      <h4>${product.name}</h4>
      <p>Game: ${product.game}</p>
      <p>Gi√°: ${product.price} VNƒê</p>
    `;
    if (!window.location.pathname.includes('product.html')) {
      div.onclick = () => {
        window.location.href = `product.html?id=${product.id}`;
      };
      if (isAdmin) {
        div.addEventListener('contextmenu', (e) => toggleContextMenu(e, 'product', index));
      }
    }
    // S·ª≠a logic ch·ªçn s·∫£n ph·∫©m cho product.html
    if (isAdmin && window.location.pathname.includes('product.html')) {
      div.addEventListener('click', () => {
        let selected = JSON.parse(localStorage.getItem('selectedProductCards') || '[]');
        const idx = selected.findIndex(p => p.id === product.id);
        if (idx >= 0) {
          selected.splice(idx, 1);
          div.classList.remove('selected');
        } else {
          selected.push(product);
          div.classList.add('selected');
        }
        localStorage.setItem('selectedProductCards', JSON.stringify(selected));
      });
      div.addEventListener('contextmenu', (e) => toggleContextMenu(e, 'product', index));
    }
    productList.appendChild(div);
  });
}

// N·∫øu l√† trang product.html
if (window.location.pathname.includes('product.html')) {
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('id');
    if (productId) {
      // Render Product Detail Page
      cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
      const product = cachedProducts.find(p => p.id === productId);
      if (product) {
        // Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m l√™n trang
        const detailSection = document.createElement('section');
        detailSection.className = 'product-detail-page';
        detailSection.innerHTML = `
          <div class=\"product-detail\">
            <img src=\"${product.image}\" alt=\"${product.name}\" onerror=\"this.src='https://via.placeholder.com/150?text=Error';\">
            <h2>${product.name}</h2>
            <div id=\"product-rating\"></div>
            <p>Game: ${product.game}</p>
            <p>Gi√°: ${product.price} VNƒê</p>
            <label>S·ªë l∆∞·ª£ng: </label>
            <input type=\"number\" id=\"product-quantity\" class=\"neon-input\" value=\"1\" min=\"1\">
            <div class=\"product-actions\">
              <button class=\"neon-btn\" id=\"add-to-cart-btn\">Th√™m v√†o gi·ªè</button>
              <button class=\"neon-btn\" id=\"buy-now-btn\">Mua ngay</button>
            </div>
            <div id=\"product-reviews\" class=\"reviews-section\">
              <h3>ƒê√°nh gi√°</h3>
              <div id=\"review-list\"></div>
              <div class=\"review-form\">
                <input type=\"number\" id=\"review-rating\" class=\"neon-input\" min=\"1\" max=\"5\" placeholder=\"ƒê√°nh gi√° (1-5)\">
                <textarea id=\"review-text\" class=\"neon-input\" placeholder=\"Nh·∫≠p nh·∫≠n x√©t c·ªßa b·∫°n\"></textarea>
                <button class=\"neon-btn\" id=\"submit-review-btn\">G·ª≠i ƒë√°nh gi√°</button>
              </div>
            </div>
          </div>
        `;
        const main = document.querySelector('main');
        if (main) {
          main.innerHTML = '';
          main.appendChild(detailSection);
        }
        document.getElementById('add-to-cart-btn').onclick = function() {
          const quantity = parseInt(document.getElementById('product-quantity').value) || 1;
          addToCart(product.game, product.name, quantity);
        };
        document.getElementById('buy-now-btn').onclick = function() {
          const quantity = parseInt(document.getElementById('product-quantity').value) || 1;
          addToCart(product.game, product.name, quantity);
          window.location.href = 'cart.html';
        };
        const ratings = JSON.parse(localStorage.getItem('productRatings') || '{}')[productId] || { avg: 5.0, count: 10415, reviews: [] };
        const stars = '‚òÖ'.repeat(Math.round(ratings.avg)) + '‚òÜ'.repeat(5 - Math.round(ratings.avg));
        document.getElementById('product-rating').innerHTML = `${stars} (${ratings.count} ƒë√°nh gi√°)`;
        const reviewList = document.getElementById('review-list');
        reviewList.innerHTML = '';
        ratings.reviews.forEach(review => {
          const div = document.createElement('div');
          div.className = 'review-item';
          div.innerHTML = `
            <p>${review.text} (${review.rating} sao)</p>
            <small>${review.user} - ${new Date(review.date).toLocaleDateString()}</small>
          `;
          reviewList.appendChild(div);
        });
        document.getElementById('submit-review-btn').onclick = function() {
          const rating = parseInt(document.getElementById('review-rating').value);
          const text = document.getElementById('review-text').value.trim();
          const user = JSON.parse(localStorage.getItem('user') || '{}');
          if (!user.username) {
            showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!', 'error');
            return;
          }
          if (!rating || rating < 1 || rating > 5 || !text) {
            showToast('Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin ƒë√°nh gi√°!', 'error');
            return;
          }
          const allRatings = JSON.parse(localStorage.getItem('productRatings') || '{}');
          if (!allRatings[productId]) allRatings[productId] = { avg: 5.0, count: 0, reviews: [] };
          allRatings[productId].reviews.push({ user: user.username, rating, text, date: new Date().toISOString() });
          allRatings[productId].count++;
          allRatings[productId].avg = allRatings[productId].reviews.reduce((sum, r) => sum + r.rating, 0) / allRatings[productId].count;
          localStorage.setItem('productRatings', JSON.stringify(allRatings));
          showToast('ƒê√£ g·ª≠i ƒë√°nh gi√°!');
          window.location.reload();
        };
      }
    } else {
      // Kh√¥ng c√≥ id, hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ admin ch·ªçn (ƒë·ªïi m√†u)
      loadProducts();
    }
  });
}

function searchProducts() {
  const query = document.getElementById('search-input').value.toLowerCase();
  const searchResults = document.getElementById('search-results');
  if (!searchResults) return;
  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
  searchResults.innerHTML = '';
  const filteredProducts = cachedProducts.filter(p => p.name.toLowerCase().includes(query) || p.game.toLowerCase().includes(query));
  if (filteredProducts.length === 0) {
    searchResults.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!</p>';
  } else {
    filteredProducts.forEach(product => {
      const div = document.createElement('div');
      div.className = 'product-item neon-card';
      div.innerHTML = `
        <img src="${product.image}" alt="${product.name}" onerror="this.src='https://via.placeholder.com/150?text=Error';">
        <h4>${product.name}</h4>
        <p>Game: ${product.game}</p>
        <p>Gi√°: ${product.price} VNƒê</p>
        <button class="neon-btn" onclick="addToCart('${product.game}', '${product.name}')">Th√™m v√†o gi·ªè</button>
      `;
      searchResults.appendChild(div);
    });
  }
}

// Th√™m bi·∫øn to√†n c·ª•c
let currentProduct = null;
let currentProductSlide = 0;

// H√†m hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
function loadProductDetail(productId) {
  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
  currentProduct = cachedProducts.find(p => p.id === productId);
  if (!currentProduct) {
    showToast('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!', 'error');
    return;
  }

  const nameEl = document.getElementById('product-name');
  const ratingEl = document.getElementById('product-rating');
  const ratingCountEl = document.getElementById('rating-count');
  const priceEl = document.getElementById('product-price');
  const locationEl = document.getElementById('delivery-location');
  const carousel = document.getElementById('product-image-carousel');
  const user = JSON.parse(localStorage.getItem('user') || '{}');

  if (nameEl && ratingEl && ratingCountEl && priceEl && locationEl && carousel) {
    nameEl.textContent = currentProduct.name;
    ratingEl.innerHTML = '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'.slice(0, Math.round(4)) + '‚òÜ'.repeat(5 - Math.round(4)); // Gi·∫£ l·∫≠p 4 sao
    ratingCountEl.textContent = 25; // Gi·∫£ l·∫≠p s·ªë l∆∞·ª£t ƒë√°nh gi√°
    priceEl.textContent = `${currentProduct.price} VNƒê`;
    locationEl.textContent = user.location || 'H·ªì Ch√≠ Minh, Qu·∫≠n 1, Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh';
    carousel.innerHTML = `
      <div class="carousel-item"><img src="${currentProduct.image}" alt="${currentProduct.name}" onerror="this.src='https://via.placeholder.com/150?text=Error';"></div>
      <div class="carousel-item"><img src="${currentProduct.image}" alt="${currentProduct.name}" onerror="this.src='https://via.placeholder.com/150?text=Error';"></div>
    `;
    loadAdminReview();
    loadUserReviews();
    document.getElementById('add-review-btn').style.display = canReview() ? 'block' : 'none';
  }
}

function prevProductSlide() {
  const items = document.querySelectorAll('#product-image-carousel .carousel-item');
  currentProductSlide = (currentProductSlide - 1 + items.length) % items.length;
  updateProductCarousel();
}

function nextProductSlide() {
  const items = document.querySelectorAll('#product-image-carousel .carousel-item');
  currentProductSlide = (currentProductSlide + 1) % items.length;
  updateProductCarousel();
}

function updateProductCarousel() {
  const carousel = document.getElementById('product-image-carousel');
  if (carousel) {
    carousel.style.transform = `translateX(-${currentProductSlide * 100}%)`;
  }
}

function updateQuantity(change) {
  let quantity = parseInt(document.getElementById('product-quantity').textContent) || 1;
  quantity = Math.max(1, quantity + change);
  document.getElementById('product-quantity').textContent = quantity;
}

function addToCartFromDetail() {
  const quantity = parseInt(document.getElementById('product-quantity').textContent) || 1;
  addToCart(currentProduct.game, currentProduct.name, quantity);
}

function handleCheckoutFromDetail() {
  const quantity = parseInt(document.getElementById('product-quantity').textContent) || 1;
  addToCart(currentProduct.game, currentProduct.name, quantity);
  handleCheckout();
}

function changeDeliveryLocation() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const newLocation = prompt('Nh·∫≠p ƒë·ªãa ƒëi·ªÉm v·∫≠n chuy·ªÉn m·ªõi:', user.location || '');
  if (newLocation) {
    user.location = newLocation;
    updateUserData(user);
    document.getElementById('delivery-location').textContent = newLocation;
    showToast('ƒê√£ c·∫≠p nh·∫≠t ƒë·ªãa ƒëi·ªÉm v·∫≠n chuy·ªÉn!');
  }
}

function openAdminEditReviewModal() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a!', 'error');
    return;
  }
  const reviewInput = document.getElementById('admin-review-input');
  const adminReview = document.getElementById('admin-review').textContent || '';
  if (reviewInput) {
    reviewInput.value = adminReview;
    openModal('admin-edit-review-modal');
  }
}

function saveAdminReview() {
  if (!isAdmin) {
    showToast('Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ l∆∞u!', 'error');
    return;
  }
  const reviewInput = document.getElementById('admin-review-input').value.trim();
  if (reviewInput) {
    currentProduct.adminReview = reviewInput;
    localStorage.setItem('productsData', JSON.stringify(cachedProducts));
    loadAdminReview();
    closeModal('admin-edit-review-modal');
    showToast('ƒê√£ l∆∞u ƒë√°nh gi√° chi ti·∫øt!');
  }
}

function loadAdminReview() {
  const reviewEl = document.getElementById('admin-review');
  if (reviewEl && currentProduct.adminReview) {
    reviewEl.textContent = currentProduct.adminReview;
  }
}

function canReview() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username) return false;
  const orders = user.orders || [];
  return orders.some(order => order.items.some(item => item.name === currentProduct.name));
}

function openReviewModal() {
  if (!canReview()) {
    showToast('Ch·ªâ ng∆∞·ªùi ƒë√£ mua s·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c ƒë√°nh gi√°!', 'error');
    return;
  }
  openModal('review-modal');
}

function submitReview() {
  const reviewInput = document.getElementById('user-review-input').value.trim();
  if (!reviewInput) {
    showToast('Vui l√≤ng nh·∫≠p ƒë√°nh gi√°!', 'error');
    return;
  }
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const review = {
    id: Date.now().toString(),
    username: user.username,
    content: reviewInput,
    date: new Date().toISOString(),
    rating: 4 // Gi·∫£ l·∫≠p ƒë√°nh gi√° 4 sao
  };
  currentProduct.reviews = currentProduct.reviews || [];
  currentProduct.reviews.push(review);
  localStorage.setItem('productsData', JSON.stringify(cachedProducts));
  closeModal('review-modal');
  loadUserReviews();
  showToast('ƒê√£ g·ª≠i ƒë√°nh gi√° th√†nh c√¥ng!');
}

function loadUserReviews() {
  const reviewsEl = document.getElementById('user-reviews');
  if (reviewsEl && currentProduct.reviews) {
    reviewsEl.innerHTML = currentProduct.reviews.map(r => `
      <div class="review-item neon-card">
        <h4>${r.username}</h4>
        <p>${r.content}</p>
        <p>Ng√†y: ${new Date(r.date).toLocaleString()}</p>
        <p>ƒê√°nh gi√°: ${'‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ'.slice(0, r.rating) + '‚òÜ'.repeat(5 - r.rating)}</p>
      </div>
    `).join('');
  }
}

// Modal ph√≥ng to ·∫£nh bi√™n lai d√πng chung
function showReceiptModal(imgUrl) {
  const modal = document.getElementById('receipt-modal');
  if (!modal) {
    showToast('L·ªói: Kh√¥ng t√¨m th·∫•y modal ph√≥ng to ·∫£nh!', 'error');
    return;
  }
  const img = document.getElementById('receipt-modal-img');
  if (!imgUrl || !imgUrl.startsWith('data:image/')) {
    showToast('URL ·∫£nh kh√¥ng h·ª£p l·ªá!', 'error');
    return;
  }
  img.src = imgUrl;
  openModal('receipt-modal');
  modal.addEventListener('click', function handler(e) {
    if (e.target === modal || e.target === img) {
      closeModal('receipt-modal');
      modal.removeEventListener('click', handler);
    }
  });
  document.addEventListener('keydown', function escCloseModal(ev) {
    if (ev.key === 'Escape' && modal.classList.contains('active')) {
      closeModal('receipt-modal');
      document.removeEventListener('keydown', escCloseModal);
    }
  });
}

function closeReceiptModal() {
  closeModal('receipt-modal');
}
// G·ªçi khi t·∫£i trang
document.addEventListener('DOMContentLoaded', () => {
  checkLoginStatus();
  const urlParams = new URLSearchParams(window.location.search);
  const productId = urlParams.get('id');
  if (productId) loadProductDetail(productId);
});

function loadUserData() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username && window.location.pathname.includes('checkout.html')) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n!', 'error');
    window.location.href = 'index.html';
    return;
  }
  const address = user.shippingAddress || 'Ch∆∞a c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ';
  const recipient = `${user.username || 'Ch∆∞a c·∫≠p nh·∫≠t'} (+84) ${user.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}`;
  const shippingAddressEl = document.getElementById('shipping-address');
  const recipientInfoEl = document.getElementById('recipient-info');
  if (shippingAddressEl) shippingAddressEl.textContent = address;
  if (recipientInfoEl) recipientInfoEl.textContent = recipient;
}

function switchContentSection(sectionId) {
  const sections = document.querySelectorAll('.content-section');
  const menuItems = document.querySelectorAll('.menu-item');
  sections.forEach(section => section.classList.remove('active'));
  menuItems.forEach(item => item.classList.remove('active'));
  const activeSection = document.getElementById(sectionId);
  const activeMenuItem = document.querySelector(`.menu-item[onclick="switchContentSection('${sectionId}')"]`);
  if (activeSection) activeSection.classList.add('active');
  if (activeMenuItem) activeMenuItem.classList.add('active');
  if (sectionId === 'order-history') loadOrders();
  if (sectionId === 'vouchers') loadVouchers();
  if (sectionId === 'notifications') loadNotifications();
}

function applyVoucher() {
  const voucherCode = document.getElementById('voucher-code').value.trim();
  const total = loadCartItems();
  const voucherMessage = document.getElementById('voucher-message');
  const user = JSON.parse(localStorage.getItem('user') || '{}');

  if (!voucherCode) {
    voucherMessage.textContent = 'Vui l√≤ng nh·∫≠p m√£ voucher!';
    return;
  }

  const voucher = user.vouchers?.find(v => v.code === voucherCode && !v.used && new Date(v.expiry) > new Date());
  if (!voucher) {
    voucherMessage.textContent = 'M√£ voucher kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ s·ª≠ d·ª•ng!';
    return;
  }

  const discount = total * (voucher.discount / 100);
  const newTotal = total - discount;
  document.getElementById('total-amount').textContent = `T·ªïng: ƒë${newTotal.toLocaleString()}`;
  voucherMessage.textContent = `√Åp d·ª•ng th√†nh c√¥ng! Gi·∫£m ƒë${discount.toLocaleString()}`;

  // L∆∞u tr·∫°ng th√°i voucher ƒë√£ s·ª≠ d·ª•ng
  voucher.used = true;
  updateUserData(user);
}

function editShippingAddress() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const newAddress = prompt('Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng m·ªõi:', user.shippingAddress || '');
  if (newAddress) {
    user.shippingAddress = newAddress;
    updateUserData(user);
    loadUserData();
    showToast('ƒê√£ c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng!');
  }
}

function editRecipientInfo() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const newPhone = prompt('Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i m·ªõi:', user.phone || '');
  if (newPhone && /^\+?\d{10,15}$/.test(newPhone)) {
    user.phone = newPhone;
    updateUserData(user);
    loadUserData();
    showToast('ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi nh·∫≠n!');
  } else {
    showToast('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!', 'error');
  }
}

function reloadCartOnPageShow() {
  if (window.location.pathname.includes('cart.html')) {
    loadCart();
  } else if (window.location.pathname.includes('checkout.html')) {
    loadCartItems();
  }
}

function saveAccountDetails() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi c·∫≠p nh·∫≠t th√¥ng tin!', 'error');
    return;
  }
  const usernameInput = document.getElementById('account-username');
  const genderSelect = document.getElementById('account-gender');
  const emailInput = document.getElementById('account-email');
  const phoneInput = document.getElementById('account-phone');
  const locationInput = document.getElementById('account-location');
  const newUsername = usernameInput.value.trim();
  if (newUsername && newUsername !== user.username) {
    cachedUsers = cachedUsers || JSON.parse(localStorage.getItem('users') || '[]');
    if (cachedUsers.find(u => u.username === newUsername)) {
      showToast('T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!', 'error');
      return;
    }
    user.username = newUsername;
  }
  if (emailInput.value.trim() && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(emailInput.value.trim())) {
    showToast('Email kh√¥ng h·ª£p l·ªá!', 'error');
    return;
  }
  if (phoneInput.value.trim() && !/^\+?\d{10,15}$/.test(phoneInput.value.trim())) {
    showToast('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!', 'error');
    return;
  }
  user.gender = genderSelect.value;
  user.email = emailInput.value.trim();
  user.phone = phoneInput.value.trim();
  user.location = locationInput.value.trim() || 'H·ªì Ch√≠ Minh';
  updateUserData(user);
  showToast('C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n th√†nh c√¥ng!');
}

function saveAvatar() {
  const url = document.getElementById('avatar-url').value.trim();
  if (!url) {
    showToast('Vui l√≤ng nh·∫≠p URL ·∫£nh avatar!', 'error');
    return;
  }
  validateImageUrl(url, (isValid) => {
    if (!isValid) {
      showToast('URL ·∫£nh kh√¥ng h·ª£p l·ªá!', 'error');
      return;
    }
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    if (user.username) {
      user.avatar = url;
      updateUserData(user);
      loadAccountAvatar();
      showToast('ƒê√£ c·∫≠p nh·∫≠t avatar th√†nh c√¥ng!');
    }
  });
}

function uploadAvatarFromFile() {
  const fileInput = document.getElementById('avatar-file');
  const avatarImg = document.getElementById('account-avatar');
  if (fileInput.files && fileInput.files[0]) {
    const file = fileInput.files[0];
    if (!file.type.startsWith('image/')) {
      showToast('Vui l√≤ng ch·ªçn file ·∫£nh!', 'error');
      return;
    }
    const reader = new FileReader();
    reader.onload = (e) => {
      const url = e.target.result;
      validateImageUrl(url, (isValid) => {
        if (isValid) {
          avatarImg.src = url;
          const user = JSON.parse(localStorage.getItem('user') || '{}');
          user.avatar = url;
          updateUserData(user);
          document.getElementById('avatar-url').value = url;
          showToast('ƒê√£ t·∫£i avatar l√™n th√†nh c√¥ng!');
        } else {
          showToast('File ·∫£nh kh√¥ng h·ª£p l·ªá!', 'error');
        }
      });
    };
    reader.readAsDataURL(file);
  }
}

function loadAccountDetails() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (user.username) {
    document.getElementById('account-username').value = user.username;
    document.getElementById('account-gender').value = user.gender || 'male';
    document.getElementById('account-email').value = user.email || '';
    document.getElementById('account-phone').value = user.phone || '';
    loadAccountAvatar();
  }
}

function loadAccountAvatar() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const avatarImg = document.getElementById('account-avatar');
  const avatarUrlInput = document.getElementById('avatar-url');
  if (avatarImg && user.avatar) {
    avatarImg.src = user.avatar;
    if (avatarUrlInput) avatarUrlInput.value = user.avatar;
  }
}

function loadOrders() {
  const orderList = document.getElementById('order-list');
  if (!orderList) return;
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  orderList.innerHTML = '';
  if (!user.orders || user.orders.length === 0) {
    orderList.innerHTML = '<p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o!</p>';
    return;
  }
  user.orders.forEach(order => {
    const div = document.createElement('div');
    div.className = 'order-item neon-card';
    div.innerHTML = `
      <h4>ƒê∆°n h√†ng #${order.id}</h4>
      <p>Ng√†y ƒë·∫∑t: ${new Date(order.date).toLocaleString()}</p>
      <p>T·ªïng ti·ªÅn: ${order.total} VNƒê</p>
      <p>Ph∆∞∆°ng th·ª©c thanh to√°n: ${order.paymentMethod}</p>
      <p>Tr·∫°ng th√°i: ${order.status}</p>
    `;
    orderList.appendChild(div);
  });
}

function viewOrderDetails(orderId) {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const order = user.orders.find(o => o.id === orderId);
  if (!order) return;
  let details = `Chi ti·∫øt ƒë∆°n h√†ng #${orderId}:\n`;
  order.items.forEach(item => {
    const price = item.options.find(opt => opt.value === item.selectedOption).price;
    details += `- ${item.name} (${item.game}): ${item.quantity} x ${price} VNƒê = ${item.quantity * price} VNƒê\n`;
  });
  details += `T·ªïng ti·ªÅn: ${order.total} VNƒê\n`;
  details += `Ng√†y ƒë·∫∑t: ${new Date(order.date).toLocaleString()}\n`;
  details += `Tr·∫°ng th√°i: ${order.status}`;
  alert(details);
}

function loadVouchers() {
  const voucherList = document.getElementById('voucher-list');
  if (!voucherList) return;
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  voucherList.innerHTML = '';
  if (!user.vouchers || user.vouchers.length === 0) {
    user.vouchers = [
      { id: 'VOUCHER1', code: 'SUMMER2025', discount: 10, expiry: '2025-12-31', used: false },
      { id: 'VOUCHER2', code: 'GAMEVAULT20', discount: 20, expiry: '2025-06-30', used: true }
    ];
    updateUserData(user);
  }
  user.vouchers.forEach(voucher => {
    const div = document.createElement('div');
    div.className = 'voucher-item neon-card';
    div.innerHTML = `
      <h4>M√£: ${voucher.code}</h4>
      <p>Gi·∫£m gi√°: ${voucher.discount}%</p>
      <p>H·∫øt h·∫°n: ${new Date(voucher.expiry).toLocaleDateString()}</p>
      <p>Tr·∫°ng th√°i: ${voucher.used ? 'ƒê√£ s·ª≠ d·ª•ng' : 'Ch∆∞a s·ª≠ d·ª•ng'}</p>
    `;
    voucherList.appendChild(div);
  });
}

function openProductModal(productId) {
  const modal = document.getElementById('product-detail-modal');
  if (!modal) return;

  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
  const product = cachedProducts.find(p => p.id === productId);
  if (!product) return;

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const deliveryLocation = user.location || 'H·ªì Ch√≠ Minh'; // Gi·∫£ l·∫≠p, c·∫ßn th√™m v√†o account.html

  // Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m
  document.getElementById('product-image').src = product.image;
  document.getElementById('product-name').textContent = product.name;
  document.getElementById('product-price').textContent = `Gi√°: ${product.price} VNƒê`;
  document.getElementById('delivery-text').textContent = deliveryLocation;

  // Gi·∫£ l·∫≠p ƒë√°nh gi√° (c·∫ßn l∆∞u v√†o localStorage)
  const ratings = JSON.parse(localStorage.getItem('productRatings') || '{}')[productId] || { avg: 5.0, count: 10415, reviews: [] };
  const stars = '‚òÖ'.repeat(Math.round(ratings.avg)) + '‚òÜ'.repeat(5 - Math.round(ratings.avg));
  document.getElementById('rating-stars').innerHTML = stars;
  document.getElementById('rating-count').textContent = ratings.count;

  // Hi·ªÉn th·ªã ƒë√°nh gi√°
  const reviewList = document.getElementById('review-list');
  reviewList.innerHTML = '';
  ratings.reviews.forEach(review => {
    const div = document.createElement('div');
    div.className = 'review-item';
    div.innerHTML = `
      <p>${review.text} (${review.rating} sao)</p>
      <small>${review.user} - ${new Date(review.date).toLocaleDateString()}</small>
    `;
    reviewList.appendChild(div);
  });

  modal.classList.add('active');
}

function addToCartFromModal() {
  const productId = document.querySelector('.product-item.selected')?.dataset.id;
  if (!productId) return;
  cachedProducts = cachedProducts || JSON.parse(localStorage.getItem('productsData') || '[]');
  const product = cachedProducts.find(p => p.id === productId);
  const quantity = parseInt(document.getElementById('product-quantity').value) || 1;
  addToCart(product.game, product.name, quantity);
  closeModal('product-detail-modal');
}

function buyNow() {
  addToCartFromModal();
  window.location.href = 'cart.html';
}

// Th√™m h√†m ƒë·ªÉ submit ƒë√°nh gi√° (ch·ªâ ng∆∞·ªùi d√πng ƒë√£ mua)
function submitReview(productId, rating, text) {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.username) {
    showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!', 'error');
    openAuthModal();
    return;
  }
  const orders = user.orders || [];
  if (!orders.some(order => order.items.some(item => item.id === productId))) {
    showToast('Ch·ªâ ng∆∞·ªùi ƒë√£ mua s·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c ƒë√°nh gi√°!', 'error');
    return;
  }
  let ratings = JSON.parse(localStorage.getItem('productRatings') || '{}');
  ratings[productId] = ratings[productId] || { avg: 0, count: 0, reviews: [] };
  const totalRating = ratings[productId].count * ratings[productId].avg + rating;
  ratings[productId].count += 1;
  ratings[productId].avg = totalRating / ratings[productId].count;
  ratings[productId].reviews.push({
    user: user.username,
    rating,
    text,
    date: new Date().toISOString()
  });
  localStorage.setItem('productRatings', JSON.stringify(ratings));
  openProductModal(productId); // T·∫£i l·∫°i modal ƒë·ªÉ c·∫≠p nh·∫≠t
  showToast('ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c g·ª≠i!');
}

function submitReviewFromModal() {
  const productId = document.querySelector('.product-item.selected')?.dataset.id;
  if (!productId) return;
  const rating = parseInt(document.getElementById('review-rating').value) || 0;
  const text = document.getElementById('review-text').value.trim();
  if (rating < 1 || rating > 5 || !text) {
    showToast('Vui l√≤ng nh·∫≠p ƒë√°nh gi√° (1-5 sao) v√† nh·∫≠n x√©t!', 'error');
    return;
  }
  submitReview(productId, rating, text);
  document.getElementById('review-rating').value = '';
  document.getElementById('review-text').value = '';
}

// C·∫≠p nh·∫≠t addToCart ƒë·ªÉ theo d√µi s·∫£n ph·∫©m ƒë√£ mua
function addToCart(game, name, quantity = 1) {
  cachedCart = cachedCart || JSON.parse(localStorage.getItem('cart') || '[]');
  const id = Date.now().toString();
  const product = cachedProducts.find(p => p.name === name && p.game === game);
  if (product) {
    cachedCart.push({
      id: product.id,
      game,
      name,
      image: product.image,
      selectedOption: 'default',
      quantity,
      options: [
        { value: 'default', label: 'M·∫∑c ƒë·ªãnh', price: product.price },
        { value: 'premium', label: 'Cao c·∫•p', price: product.price * 2 }
      ]
    });
    localStorage.setItem('cart', JSON.stringify(cachedCart));
    showToast('ƒê√£ th√™m v√†o gi·ªè h√†ng!');
  }
}

function loadNotifications() {
  const container = document.getElementById('notifications');
  if (!container) return;

  const user = JSON.parse(localStorage.getItem('user') || '{}');
  container.innerHTML = '';
  if (!user.notifications || user.notifications.length === 0) {
    container.innerHTML = '<p>Kh√¥ng c√≥ th√¥ng b√°o n√†o.</p>';
    return;
  }

  // Th√™m n√∫t "X√≥a t·∫•t c·∫£"
  const clearAllButton = document.createElement('div');
  clearAllButton.className = 'clear-all-notifications';
  clearAllButton.innerHTML = '<button class="neon-btn danger" onclick="deleteAllNotifications()">X√≥a t·∫•t c·∫£</button>';
  container.appendChild(clearAllButton);

  user.notifications.forEach((notification, index) => {
    const div = document.createElement('div');
    div.className = 'notification-item neon-card';
    div.innerHTML = `
      <div class="notification-content">
        <p>${notification.message}</p>
        <span class="notification-date">${notification.date}</span>
      </div>
      <button class="neon-btn danger" onclick="deleteNotification(${index})">X√≥a</button>
    `;
    container.appendChild(div);
  });
}

function deleteNotification(index) {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.notifications || index < 0 || index >= user.notifications.length) {
    showToast('L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ƒë·ªÉ x√≥a!', 'error');
    return;
  }
  user.notifications.splice(index, 1);
  updateUserData(user);
  loadNotifications();
  showToast('ƒê√£ x√≥a th√¥ng b√°o!', 'success');
}

function deleteAllNotifications() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  if (!user.notifications || user.notifications.length === 0) {
    showToast('Kh√¥ng c√≥ th√¥ng b√°o ƒë·ªÉ x√≥a!', 'error');
    return;
  }
  if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ th√¥ng b√°o?')) {
    return;
  }
  user.notifications = [];
  updateUserData(user);
  loadNotifications();
  showToast('ƒê√£ x√≥a t·∫•t c·∫£ th√¥ng b√°o!', 'success');
}

function reloadCartOnPageShow() {
  if (window.location.pathname.includes('cart.html')) {
    loadCart();
  }
}

// G·ªçi khi trang ƒë∆∞·ª£c t·∫£i ho·∫∑c hi·ªÉn th·ªã l·∫°i
document.addEventListener('DOMContentLoaded', () => {
  checkLoginStatus();
  loadGames();
  loadBanners();
  loadHotDeals();
  loadProducts();
  loadAccountDetails();
  loadCart();
  loadLanguage();
  handleUserContextMenu();
  if (window.location.pathname.includes('account.html')) {
    loadTransactions();
  }
});
window.addEventListener('pageshow', reloadCartOnPageShow);

function markNotificationAsRead(notificationId) {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  user.notifications = user.notifications.map(n => n.id === notificationId ? { ...n, read: true } : n);
  updateUserData(user);
  loadNotifications();
}

function handleUserContextMenu() {
  const userContextMenu = document.getElementById('user-context-menu');
  if (userContextMenu) {
    userContextMenu.querySelectorAll('li').forEach(item => {
      item.addEventListener('click', () => {
        if (item.textContent.includes('Th√¥ng tin t√†i kho·∫£n')) {
          window.location.href = 'account.html';
        } else if (item.textContent.includes('ƒêƒÉng xu·∫•t')) {
          logout();
        }
        userContextMenu.classList.remove('active');
      });
    });
  }
}